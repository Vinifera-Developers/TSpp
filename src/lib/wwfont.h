/*******************************************************************************
/*                     O P E N  S O U R C E  --  T S + +                      **
/*******************************************************************************
 *
 *  @project       TS++
 *
 *  @file          WWFONT.H
 *
 *  @author        Scott_b (see notes below)
 *
 *  @contributors  tomsons26, ZivDero
 *
 *  @brief         Westwood font file handler.
 *
 *  @license       TS++ is free software: you can redistribute it and/or
 *                 modify it under the terms of the GNU General Public License
 *                 as published by the Free Software Foundation, either version
 *                 3 of the License, or (at your option) any later version.
 *
 *                 TS++ is distributed in the hope that it will be
 *                 useful, but WITHOUT ANY WARRANTY; without even the implied
 *                 warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *                 PURPOSE. See the GNU General Public License for more details.
 *
 *                 You should have received a copy of the GNU General Public
 *                 License along with this program.
 *                 If not, see <http://www.gnu.org/licenses/>.
 *
 *  @note          This file contains modified code for C&C Generals released
 *                 by Electronic Arts under the GPL3 license. Source:
 *                 https://github.com/electronicarts/CnC_Generals_Zero_Hour
 *
 ******************************************************************************/
#pragma once

#include "font.h"
#include "surface.h"

class ConvertClass;

/*
**  This is a concrete font class object that is used to handle font data as generated by
**  the legacy FONTMAKE.EXE utility.
*/
class WWFontClass : public FontClass
{
    typedef FontClass BASECLASS;

public:
    WWFontClass(void const* fontdata, bool isoutlined = false, int shadow = 0);
    virtual ~WWFontClass();

    void* Set_Font_Data(void const* fontdata)
    {
        void* old = (void*)FontData;
        FontData = (FontType*)fontdata;
        return old;
    }

    void* Get_Font_Data() { return (void*)FontData; }

    virtual int Char_Pixel_Width(char c) const;
    virtual int String_Pixel_Width(char const* string) const;
    virtual void String_Pixel_Bounds(const char* string, Rect& bounds) const;
    virtual int Get_Width() const;
    virtual int Get_Height() const;
    virtual Point2D Print(char const* string, Surface& surface, Rect const& cliprect, Point2D const& point, ConvertClass const& converter, unsigned char const* remap = NULL) const;

    virtual int Set_XSpacing(int x);
    virtual int Set_YSpacing(int y);

    int Get_XSpacing() const { return FontXSpacing; }
    int Get_YSpacing() const { return FontXSpacing; }

private:
    /*
    **  Is the font an outline type font (with special outline
    **  pixels in the source art)?
    */
    bool IsOutlinedData;

    /*
    **  Shadow type to use when displaying this font. The value only applies if the
    **  font is equipped with outline data.
    */
    int Shadow;

    /*
    **  Override font X spacing value.
    */
    int FontXSpacing;

    /*
    **  Override font Y spacing value.
    */
    int FontYSpacing;

    /*
    **  Header structure of the font data file.
    */
    typedef struct FontType {
        unsigned short FontLength;
        unsigned char FontCompress;
        unsigned char FontDataBlocks;
        unsigned short InfoBlockOffset;
        unsigned short OffsetBlockOffset;
        unsigned short WidthBlockOffset;
        unsigned short DataBlockOffset;
        unsigned short HeightOffset;
    } FontType;
    FontType const* FontData;

    int Raw_Width() const;
    int Raw_Height() const;
};
